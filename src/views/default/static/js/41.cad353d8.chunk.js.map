{"version":3,"sources":["components/shared-components/AvatarStatus/index.js","components/shared-components/EllipsisDropdown/index.js","views/my-views/rooms/rooms-list/index.js"],"names":["renderAvatar","props","style","minWidth","size","className","type","text","AvatarStatus","name","suffix","subTitle","id","src","icon","shape","gap","onNameClick","onClick","EllipsisDropdown","overlay","menu","placement","trigger","EllipsisOutlined","defaultProps","RoomsList","GetMyRooms","_RemoveRoomsInList","useState","page","limit","select","params","useEffect","dropdownMenu","row","Item","to","_id","Flex","alignItems","EyeOutlined","loading","LoadingOutlined","DeleteOutlined","selectedRows","length","setSelectedRows","selectedRowKeys","setSelectedRowKeys","rowSelection","onChange","key","rows","columns","title","width","render","val","c","a","dataIndex","_","console","log","Array","isArray","prefix_url","filename","join","slug","displayType","value","Math","round","regular","toFixed","prefix","thousandSeparator","special","Object","keys","slice","map","color","CheckCircleOutlined","CloseCircleOutlined","replace","count","backgroundColor","boxShadow","showZero","elm","bordered","dataSource","data","rowKey","preserveSelectedRowKeys","connect","list","My","collections","rooms","pagination","React","memo"],"mappings":"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","file":"static/js/41.cad353d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Avatar } from 'antd';\r\n\r\nconst renderAvatar = props => {\r\n\treturn (\r\n\t\t<div style={{minWidth:`${props?.size ?? 60}px`}}>\r\n\t\t\t<Avatar {...props} className={`ant-avatar-${props.type}`}>{props.text}</Avatar>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport const AvatarStatus = props => {\r\n\tconst { name, suffix, subTitle, id, type, src, icon, size, shape, gap, text, onNameClick } = props\r\n\treturn (\r\n\t\t<div className=\"avatar-status overflow-hidden d-flex align-items-center\">\r\n\t\t\t{renderAvatar({icon, src, type, size, shape, gap, text })}\r\n\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tonNameClick ? \r\n\t\t\t\t\t\t<div onClick={() => onNameClick({name, subTitle, src, id})} className=\"avatar-status-name clickable\">{name}</div> \r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<div className=\"avatar-status-name w-full overflow-hidden max-w-[220px] truncate\">\r\n\t\t\t\t\t\t\t<span className={`truncate`}>{name}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<span>{suffix}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"text-muted avatar-status-subtitle\">{subTitle}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nAvatarStatus.propTypes = {\r\n\tname: PropTypes.string,\r\n\tsrc: PropTypes.string,\r\n\ttype: PropTypes.string,\r\n\tonNameClick: PropTypes.func\r\n}\r\n\r\n\r\nexport default AvatarStatus\r\n","import React from 'react'\r\nimport { Dropdown, Menu } from 'antd';\r\nimport { EllipsisOutlined } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst EllipsisDropdown = props => {\r\n\treturn (\r\n\t\t<Dropdown overlay={props.menu} placement={props.placement} trigger={['click']}>\r\n\t\t\t<div className=\"ellipsis-dropdown\">\r\n\t\t\t\t<EllipsisOutlined />\r\n\t\t\t</div>\r\n\t\t</Dropdown>\r\n\t)\r\n}\r\n\r\nEllipsisDropdown.propTypes = {\r\n\ttrigger: PropTypes.string,\r\n\tplacement: PropTypes.string\r\n}\r\n\r\nEllipsisDropdown.defaultProps = {\r\n\ttrigger: 'click',\r\n\tplacement: 'bottomRight',\r\n\tmenu: <Menu/>\r\n};\r\n\r\nexport default EllipsisDropdown\r\n","import React, {useEffect, useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {_RemoveRoomsInList, GetMyRooms} from \"redux/actions\";\r\nimport {Table, Card, Menu, Badge, Button, Tag, Tooltip, Avatar} from \"antd\";\r\nimport AvatarStatus from \"components/shared-components/AvatarStatus\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nimport {CheckCircleOutlined,LoadingOutlined, CloseCircleOutlined, DeleteOutlined, EyeOutlined} from \"@ant-design/icons\";\r\nimport EllipsisDropdown from \"components/shared-components/EllipsisDropdown\";\r\nimport { Link } from 'react-router-dom'\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nconst RoomsList = (props) => {\r\n    let {GetMyRooms,_RemoveRoomsInList} = props\r\n    const [params, setParams] = useState({\r\n        page: 1,\r\n        limit: 20,\r\n        select: ['name', 'facility', 'is_available', 'status', 'slug', 'seen', 'is_deleted', '_id', 'schedule', 'images', 'price']\r\n    })\r\n\r\n    useEffect(() => {\r\n        GetMyRooms({...params})\r\n    }, [GetMyRooms])\r\n\r\n    const onDelete = (id)=> {\r\n        _RemoveRoomsInList(id)\r\n    }\r\n\r\n\r\n    const dropdownMenu = row => (\r\n        <Menu>\r\n            <Menu.Item onClick={() => {\r\n\r\n            }}>\r\n                <Link to={`/my/room/u/${row?._id}`}>\r\n                    <Flex alignItems=\"center\">\r\n                        <EyeOutlined/>\r\n                        <span className=\"ml-2\">View Details</span>\r\n                    </Flex>\r\n                </Link>\r\n\r\n            </Menu.Item>\r\n            <Menu.Item onClick={() => {\r\n                onDelete(row?._id)\r\n            }}>\r\n                <Flex alignItems=\"center\">\r\n                    {\r\n                        row?.loading ? (\r\n                            <LoadingOutlined/>\r\n                        ):(\r\n                            <DeleteOutlined/>\r\n                        )\r\n                    }\r\n\r\n                    <span\r\n                        className=\"ml-2\">{selectedRows.length > 0 ? `Delete (${selectedRows.length})` : 'Delete'}</span>\r\n                </Flex>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    const [selectedRows, setSelectedRows] = useState([])\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([])\r\n\r\n    const rowSelection = {\r\n        onChange: (key, rows) => {\r\n            setSelectedRows(rows)\r\n            setSelectedRowKeys(key)\r\n        }\r\n    };\r\n    const columns = [\r\n        {\r\n            key: \"id\",\r\n            title: \"No\",\r\n            width: '50px',\r\n            render: (val,c,a) => {\r\n                return (\r\n                    <span>{a + 1 ?? \"-\"}</span>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            dataIndex: \"images\",\r\n            key: \"thumbnail\",\r\n            title: \"Avatar\",\r\n            width:220,\r\n            render: (_,val) => {\r\n                console.log({_,val})\r\n                return (\r\n                    // <Badge showZero count={Array.isArray(_) && _.length}>\r\n                        <AvatarStatus\r\n                            src={Array.isArray(_) && _.length > 0 ? [_[0]?.prefix_url,_[0]?.filename].join(\"/\"):\"\"}\r\n                            name={val?.name ?? val?.slug ?? \"-\"}/>\r\n                    // </Badge>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            dataIndex: \"price\",\r\n            key: \"price\",\r\n            title: \"Price\",\r\n            render: (_, val) => {\r\n                return (\r\n                    <div>\r\n                        <div className={'d-flex mb-2'}>\r\n                            <span className={'mr-1'}>Regular</span>\r\n                            <NumberFormat\r\n                                className={'font-weight-semibold'}\r\n                                displayType={'text'}\r\n                                value={(Math.round(_?.regular * 100) / 100).toFixed(2)}\r\n                                prefix={'Rp '}\r\n                                thousandSeparator={true}\r\n                            />\r\n                        </div>\r\n                        <div className={'d-flex mb-2'}>\r\n                            <span className={'mr-1'}>Special</span>\r\n                            <NumberFormat\r\n                                className={'font-weight-semibold'}\r\n                                displayType={'text'}\r\n                                value={(Math.round(_?.special * 100) / 100).toFixed(2)}\r\n                                prefix={'Rp '}\r\n                                thousandSeparator={true}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            dataIndex: \"facility\",\r\n            key: \"facility\",\r\n            width: 240,\r\n            title: \"Facility\",\r\n            render: (_, val) => {\r\n                return (\r\n                    <div>\r\n                        {Object.keys(_).slice(0, 4).map((key) => {\r\n                            return (\r\n                                typeof (_[key]) === \"boolean\" ?\r\n                                    <Tag color={_[key] ? 'cyan' : \"orange\"} className={'mb-1'}>\r\n                                        <Flex alignItems={'center'}>\r\n                                            {\r\n                                                _[key] ? (\r\n                                                    <CheckCircleOutlined className={'mr-1'}/>\r\n                                                ) : (\r\n                                                    <CloseCircleOutlined className={'mr-1'}/>\r\n                                                )\r\n                                            }\r\n\r\n                                            <span>{key.replace(/_/g, ' ')}</span>\r\n                                        </Flex>\r\n                                    </Tag>\r\n                                    :\r\n\r\n                                    typeof(_[key]) !== \"undefined\" &&  Array.isArray(_[key]) && _[key].length > 0 && (\r\n                                        <Tooltip title={`${key.replace(/_/g, ' ')}`} className={'mb-1'}>\r\n                                            <Tag color={'cyan'}>\r\n                                                {\r\n                                                    typeof(_[key]) !== \"undefined\" &&  Array.isArray(_[key]) && _[key].length > 0 && (\r\n                                                        <span>{_[key].length > 7 ? _[key].slice(0, 10) + \"...\" : _[key]}</span>\r\n                                                    )\r\n                                                }\r\n                                            </Tag>\r\n\r\n                                        </Tooltip>\r\n                                    )\r\n                            )\r\n                        })}\r\n                        {\r\n                            Object.keys(_).length > 4 ? (\r\n                                <Tooltip title={Object.keys(_).slice(4).length + \" More..\"}>\r\n                                    <Badge count={Object.keys(_).slice(4).length} style={{ backgroundColor: '#fff', color: '#999', boxShadow: '0 0 0 1px #d9d9d9 inset' }}/>\r\n                                </Tooltip>\r\n                            ) : 10\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            dataIndex: \"seen\",\r\n            key: \"seen\",\r\n            width: 60,\r\n            title: \"Seen\",\r\n            render: (_, val) => {\r\n                return (\r\n                    <div>\r\n                        <Badge count={_} showZero>\r\n                            <Button size={'small'} icon={<EyeOutlined/>}/>\r\n                        </Badge>\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            dataIndex: \"is_available\",\r\n            key: \"is_available\",\r\n            width: 80,\r\n            title: \"Available\",\r\n            render: (_, val) => {\r\n                return (\r\n                    <div>\r\n                        {_ ? <Tag color=\"geekblue\">Available</Tag> : <Tag color=\"volcano\">Not Available</Tag>}\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: '',\r\n            width: 60,\r\n            dataIndex: 'actions',\r\n            render: (_, elm) => (\r\n                <div className=\"text-right\">\r\n                    <EllipsisDropdown menu={dropdownMenu(elm)}/>\r\n                </div>\r\n            )\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Card bordered={false} title={'Room List'}>\r\n            <div className=\"table-responsive\">\r\n                <Table\r\n                    loading={props?.loading ?? false}\r\n                    columns={columns}\r\n                    dataSource={props?.data ?? []}\r\n                    rowKey=\"_id\"\r\n                    rowSelection={{\r\n                        selectedRowKeys: selectedRowKeys,\r\n                        type: 'checkbox',\r\n                        preserveSelectedRowKeys: false,\r\n                        ...rowSelection,\r\n                    }}\r\n                />\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nRoomsList.propTypes = {\r\n    GetMyRooms: PropTypes.func.isRequired,\r\n    _RemoveRoomsInList: PropTypes.func.isRequired\r\n}\r\nRoomsList.defaultProps = {\r\n    GetMyRooms: (query = {}) => {\r\n\r\n    }\r\n}\r\n\r\nexport default connect(({My}) => {\r\n    let {collections} = My\r\n    let {rooms} = collections\r\n    let {list} = rooms\r\n    let {data, loading, pagination, params} = list\r\n    return {data, loading, pagination, params}\r\n}, {GetMyRooms,_RemoveRoomsInList})(React.memo(RoomsList))\r\n"],"sourceRoot":""}